{"version":3,"sources":["../src/index.tsx","../src/components/UserProvider.tsx"],"sourcesContent":["// Types\nexport type { User } from '@supabase/supabase-js';\n\n// Methods & Components\nexport { UserProvider, useUser } from './components/UserProvider';\n","import React, {\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n  useCallback\n} from 'react';\nimport { SupabaseClient, User } from '@supabase/supabase-js';\nimport {\n  CallbackUrlFailed,\n  ErrorPayload,\n  UserFetcher,\n  UserState\n} from '@supabase/auth-helpers-shared';\nimport {\n  TOKEN_REFRESH_MARGIN,\n  RETRY_INTERVAL,\n  MAX_RETRIES\n} from '@supabase/auth-helpers-shared';\n\nlet networkRetries = 0;\nlet refreshTokenTimer: ReturnType<typeof setTimeout>;\n\nconst UserContext = createContext<UserState | undefined>(undefined);\n\nconst handleError = async (error: any) => {\n  if (typeof error.json !== 'function') {\n    return String(error);\n  }\n  const err = await error.json();\n  return {\n    message:\n      err.msg ||\n      err.message ||\n      err.error_description ||\n      err.error ||\n      JSON.stringify(err),\n    status: error?.status || 500\n  };\n};\n\nconst userFetcher: UserFetcher = async (url) => {\n  const response = await fetch(url).catch(() => undefined);\n  if (!response)\n    return { user: null, accessToken: null, error: 'Request failed' };\n  return response.ok\n    ? response.json()\n    : { user: null, accessToken: null, error: await handleError(response) };\n};\n\nexport interface Props {\n  supabaseClient: SupabaseClient;\n  callbackUrl?: string;\n  profileUrl?: string;\n  user?: User;\n  fetcher?: UserFetcher;\n  autoRefreshToken?: boolean;\n  [propName: string]: any;\n}\n\nexport const UserProvider = (props: Props) => {\n  const {\n    supabaseClient,\n    callbackUrl = '/api/auth/callback',\n    profileUrl = '/api/auth/user',\n    user: initialUser = null,\n    fetcher = userFetcher,\n    autoRefreshToken = true\n  } = props;\n  const [user, setUser] = useState<User | null>(initialUser);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(!initialUser);\n  const [error, setError] = useState<ErrorPayload>();\n\n  const checkSession = useCallback(async (): Promise<void> => {\n    try {\n      networkRetries++;\n      const { user, accessToken, error } = await fetcher(profileUrl);\n      if (error) {\n        if (error === 'Request failed' && networkRetries < MAX_RETRIES) {\n          if (refreshTokenTimer) clearTimeout(refreshTokenTimer);\n          refreshTokenTimer = setTimeout(\n            checkSession,\n            RETRY_INTERVAL ** networkRetries * 100 // exponential backoff\n          );\n          return;\n        }\n        setError(new Error(error));\n      }\n      networkRetries = 0;\n      if (accessToken) {\n        supabaseClient.auth.setAuth(accessToken);\n        setAccessToken(accessToken);\n      }\n      setUser(user);\n      // Set up auto token refresh\n      if (autoRefreshToken) {\n        if (user) {\n          let timeout = 20 * 1000;\n          const expiresAt = (user as any).exp;\n          if (expiresAt) {\n            const timeNow = Math.round(Date.now() / 1000);\n            const expiresIn = expiresAt - timeNow;\n            const refreshDurationBeforeExpires =\n              expiresIn > TOKEN_REFRESH_MARGIN ? TOKEN_REFRESH_MARGIN : 0.5;\n            timeout = (expiresIn - refreshDurationBeforeExpires) * 1000;\n          }\n          setTimeout(checkSession, timeout);\n        }\n      }\n      if (!user) setIsLoading(false);\n    } catch (_e) {\n      const error = new CallbackUrlFailed(profileUrl);\n      setError(error.toObj());\n    }\n  }, [profileUrl]);\n\n  const handleVisibilityChange = async () => {\n    if (document?.visibilityState === 'visible') {\n      setIsLoading(true);\n      await checkSession();\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    handleVisibilityChange();\n    if (autoRefreshToken)\n      window?.addEventListener('visibilitychange', handleVisibilityChange);\n    const { data: authListener } = supabaseClient.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'TOKEN_REFRESHED') return; // ignore this as we're refreshing tokens server-side.\n        setIsLoading(true);\n        // Forward session from client to server where it is set in a Cookie.\n        // NOTE: this will eventually be removed when the Cookie can be set differently.\n        await fetch(callbackUrl, {\n          method: 'POST',\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n          credentials: 'same-origin',\n          body: JSON.stringify({ event, session })\n        }).then((res) => {\n          if (!res.ok) {\n            const error = new CallbackUrlFailed(callbackUrl);\n            setError(error);\n          }\n        });\n        // Fetch the user from the API route\n        await checkSession();\n        setIsLoading(false);\n      }\n    );\n\n    return () => {\n      window?.removeEventListener('visibilitychange', handleVisibilityChange);\n      authListener?.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const value = {\n    isLoading,\n    user,\n    accessToken,\n    error,\n    checkSession\n  };\n  return <UserContext.Provider value={value} {...props} />;\n};\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a UserProvider.`);\n  }\n  return context;\n};\n"],"mappings":"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","names":[]}